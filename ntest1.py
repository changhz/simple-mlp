"""
Network Test 1

input: 5x5 input neurons mimicing a digit from 0 to 9
output: 4 bits of classified binary representation
"""

from NeuralNetwork0 import NeuralNetwork0

import timeit
import pprint

pp = pprint.PrettyPrinter(width=40)

start = timeit.default_timer()


def test0():
    train_set = (
        ((
            0, 0, 1, 1, 0,
            0, 1, 0, 1, 0,
            0, 1, 0, 1, 0,
            0, 1, 0, 1, 0,
            0, 1, 1, 0, 0,
        ),
            # 0
            (0, 0, 0, 0)),
        ((
            0, 1, 1, 0, 0,
            0, 0, 1, 0, 0,
            0, 0, 1, 0, 0,
            0, 0, 1, 0, 0,
            0, 0, 1, 0, 0,
        ),
            # 1
            (0, 0, 0, 1)),
        ((
            0, 1, 1, 1, 0,
            0, 1, 0, 1, 0,
            0, 0, 1, 1, 0,
            0, 1, 0, 0, 0,
            0, 1, 1, 1, 0,
        ),
            # 2
            (0, 0, 1, 0)),
        ((
            0, 1, 1, 1, 0,
            0, 0, 0, 1, 0,
            0, 1, 1, 1, 0,
            0, 1, 0, 0, 0,
            0, 1, 1, 1, 0,
        ),
            # 2
            (0, 0, 1, 0)),
        ((
            0, 1, 1, 1, 0,
            0, 0, 0, 1, 0,
            0, 0, 1, 0, 0,
            0, 0, 0, 1, 0,
            0, 1, 1, 1, 0,
        ),
            # 3
            (0, 0, 1, 1)),
        ((
            0, 1, 1, 1, 0,
            0, 0, 0, 1, 0,
            0, 0, 1, 0, 0,
            0, 1, 0, 0, 0,
            0, 1, 0, 0, 0,
        ),
            # 7
            (0, 1, 1, 1)),
        ((
            0, 1, 1, 1, 0,
            0, 1, 0, 0, 0,
            0, 1, 1, 1, 0,
            0, 0, 0, 1, 0,
            0, 1, 1, 1, 0,
        ),
            # 5
            (0, 1, 0, 1)),
        ((
            0, 1, 1, 1, 0,
            0, 1, 0, 1, 0,
            0, 1, 1, 1, 0,
            0, 1, 0, 1, 0,
            0, 1, 1, 1, 0,
        ),
            # 8
            (1, 0, 0, 0)),
        ((
            0, 1, 1, 1, 0,
            0, 1, 0, 1, 0,
            0, 1, 0, 1, 0,
            0, 1, 0, 1, 0,
            0, 1, 1, 1, 0,
        ),
            # 0
            (0, 0, 0, 0)),
        ((
            0, 0, 1, 0, 0,
            0, 1, 1, 0, 0,
            1, 1, 1, 1, 0,
            0, 0, 1, 0, 0,
            0, 0, 1, 0, 0,
        ),
            # 4
            (0, 1, 0, 0)),
        ((
            0, 1, 1, 0, 0,
            0, 1, 1, 0, 0,
            0, 1, 1, 1, 0,
            0, 0, 1, 0, 0,
            0, 0, 1, 0, 0,
        ),
            # 4
            (0, 1, 0, 0)),
        ((
            0, 1, 1, 1, 0,
            0, 1, 0, 1, 0,
            0, 1, 1, 1, 0,
            0, 0, 0, 1, 0,
            0, 0, 0, 1, 0,
        ),
            # 9
            (1, 0, 0, 1)),
    )
    # print(len(input_set))
    # print(len(target_set))
    net = NeuralNetwork0((25, 30, 4), 1)
    net.train(train_set, e_max=0.001, i_max=1000, gamma=1)

    net.calc((
        0, 0, 1, 0, 0,
        0, 1, 1, 0, 0,
        0, 1, 1, 1, 0,
        0, 0, 1, 0, 0,
        0, 0, 1, 0, 0,
    ))
    print(net.out())

    # pp.pprint(net.weights[0])
    # pp.pprint(net.weights[-1])


test0()

stop = timeit.default_timer()
# print('\n')
print('Time elapsed: %.3f secs' % (stop - start))
